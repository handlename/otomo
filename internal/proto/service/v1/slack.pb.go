// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: service/v1/slack.proto

package servicev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SlackChallengeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Challenge     string                 `protobuf:"bytes,2,opt,name=challenge,proto3" json:"challenge,omitempty"`
	Type          string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SlackChallengeRequest) Reset() {
	*x = SlackChallengeRequest{}
	mi := &file_service_v1_slack_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SlackChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlackChallengeRequest) ProtoMessage() {}

func (x *SlackChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_v1_slack_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlackChallengeRequest.ProtoReflect.Descriptor instead.
func (*SlackChallengeRequest) Descriptor() ([]byte, []int) {
	return file_service_v1_slack_proto_rawDescGZIP(), []int{0}
}

func (x *SlackChallengeRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SlackChallengeRequest) GetChallenge() string {
	if x != nil {
		return x.Challenge
	}
	return ""
}

func (x *SlackChallengeRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type SlackChallengeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Challenge     string                 `protobuf:"bytes,1,opt,name=challenge,proto3" json:"challenge,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SlackChallengeResponse) Reset() {
	*x = SlackChallengeResponse{}
	mi := &file_service_v1_slack_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SlackChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlackChallengeResponse) ProtoMessage() {}

func (x *SlackChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_v1_slack_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlackChallengeResponse.ProtoReflect.Descriptor instead.
func (*SlackChallengeResponse) Descriptor() ([]byte, []int) {
	return file_service_v1_slack_proto_rawDescGZIP(), []int{1}
}

func (x *SlackChallengeResponse) GetChallenge() string {
	if x != nil {
		return x.Challenge
	}
	return ""
}

var File_service_v1_slack_proto protoreflect.FileDescriptor

const file_service_v1_slack_proto_rawDesc = "" +
	"\n" +
	"\x16service/v1/slack.proto\x12\n" +
	"service.v1\"_\n" +
	"\x15SlackChallengeRequest\x12\x14\n" +
	"\x05token\x18\x01 \x01(\tR\x05token\x12\x1c\n" +
	"\tchallenge\x18\x02 \x01(\tR\tchallenge\x12\x12\n" +
	"\x04type\x18\x03 \x01(\tR\x04type\"6\n" +
	"\x16SlackChallengeResponse\x12\x1c\n" +
	"\tchallenge\x18\x01 \x01(\tR\tchallenge2]\n" +
	"\x05Slack\x12T\n" +
	"\tChallenge\x12!.service.v1.SlackChallengeRequest\x1a\".service.v1.SlackChallengeResponse\"\x00B\xa6\x01\n" +
	"\x0ecom.service.v1B\n" +
	"SlackProtoP\x01Z?github.com/handlename/otomo/internal/proto/service/v1;servicev1\xa2\x02\x03SXX\xaa\x02\n" +
	"Service.V1\xca\x02\n" +
	"Service\\V1\xe2\x02\x16Service\\V1\\GPBMetadata\xea\x02\vService::V1b\x06proto3"

var (
	file_service_v1_slack_proto_rawDescOnce sync.Once
	file_service_v1_slack_proto_rawDescData []byte
)

func file_service_v1_slack_proto_rawDescGZIP() []byte {
	file_service_v1_slack_proto_rawDescOnce.Do(func() {
		file_service_v1_slack_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_service_v1_slack_proto_rawDesc), len(file_service_v1_slack_proto_rawDesc)))
	})
	return file_service_v1_slack_proto_rawDescData
}

var file_service_v1_slack_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_service_v1_slack_proto_goTypes = []any{
	(*SlackChallengeRequest)(nil),  // 0: service.v1.SlackChallengeRequest
	(*SlackChallengeResponse)(nil), // 1: service.v1.SlackChallengeResponse
}
var file_service_v1_slack_proto_depIdxs = []int32{
	0, // 0: service.v1.Slack.Challenge:input_type -> service.v1.SlackChallengeRequest
	1, // 1: service.v1.Slack.Challenge:output_type -> service.v1.SlackChallengeResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_service_v1_slack_proto_init() }
func file_service_v1_slack_proto_init() {
	if File_service_v1_slack_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_service_v1_slack_proto_rawDesc), len(file_service_v1_slack_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_v1_slack_proto_goTypes,
		DependencyIndexes: file_service_v1_slack_proto_depIdxs,
		MessageInfos:      file_service_v1_slack_proto_msgTypes,
	}.Build()
	File_service_v1_slack_proto = out.File
	file_service_v1_slack_proto_goTypes = nil
	file_service_v1_slack_proto_depIdxs = nil
}
