// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: service/v1/local.proto

package servicev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/handlename/otomo/internal/proto/service/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LocalName is the fully-qualified name of the Local service.
	LocalName = "service.v1.Local"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LocalGetReplyProcedure is the fully-qualified name of the Local's GetReply RPC.
	LocalGetReplyProcedure = "/service.v1.Local/GetReply"
)

// LocalClient is a client for the service.v1.Local service.
type LocalClient interface {
	GetReply(context.Context, *connect.Request[v1.GetReplyRequest]) (*connect.Response[v1.GetReplyResponse], error)
}

// NewLocalClient constructs a client for the service.v1.Local service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLocalClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LocalClient {
	baseURL = strings.TrimRight(baseURL, "/")
	localMethods := v1.File_service_v1_local_proto.Services().ByName("Local").Methods()
	return &localClient{
		getReply: connect.NewClient[v1.GetReplyRequest, v1.GetReplyResponse](
			httpClient,
			baseURL+LocalGetReplyProcedure,
			connect.WithSchema(localMethods.ByName("GetReply")),
			connect.WithClientOptions(opts...),
		),
	}
}

// localClient implements LocalClient.
type localClient struct {
	getReply *connect.Client[v1.GetReplyRequest, v1.GetReplyResponse]
}

// GetReply calls service.v1.Local.GetReply.
func (c *localClient) GetReply(ctx context.Context, req *connect.Request[v1.GetReplyRequest]) (*connect.Response[v1.GetReplyResponse], error) {
	return c.getReply.CallUnary(ctx, req)
}

// LocalHandler is an implementation of the service.v1.Local service.
type LocalHandler interface {
	GetReply(context.Context, *connect.Request[v1.GetReplyRequest]) (*connect.Response[v1.GetReplyResponse], error)
}

// NewLocalHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLocalHandler(svc LocalHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	localMethods := v1.File_service_v1_local_proto.Services().ByName("Local").Methods()
	localGetReplyHandler := connect.NewUnaryHandler(
		LocalGetReplyProcedure,
		svc.GetReply,
		connect.WithSchema(localMethods.ByName("GetReply")),
		connect.WithHandlerOptions(opts...),
	)
	return "/service.v1.Local/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LocalGetReplyProcedure:
			localGetReplyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLocalHandler returns CodeUnimplemented from all methods.
type UnimplementedLocalHandler struct{}

func (UnimplementedLocalHandler) GetReply(context.Context, *connect.Request[v1.GetReplyRequest]) (*connect.Response[v1.GetReplyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("service.v1.Local.GetReply is not implemented"))
}
