// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: service/v1/slack.proto

package servicev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/handlename/otomo/internal/proto/service/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SlackName is the fully-qualified name of the Slack service.
	SlackName = "service.v1.Slack"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SlackChallengeProcedure is the fully-qualified name of the Slack's Challenge RPC.
	SlackChallengeProcedure = "/service.v1.Slack/Challenge"
)

// SlackClient is a client for the service.v1.Slack service.
type SlackClient interface {
	Challenge(context.Context, *connect.Request[v1.SlackChallengeRequest]) (*connect.Response[v1.SlackChallengeResponse], error)
}

// NewSlackClient constructs a client for the service.v1.Slack service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSlackClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SlackClient {
	baseURL = strings.TrimRight(baseURL, "/")
	slackMethods := v1.File_service_v1_slack_proto.Services().ByName("Slack").Methods()
	return &slackClient{
		challenge: connect.NewClient[v1.SlackChallengeRequest, v1.SlackChallengeResponse](
			httpClient,
			baseURL+SlackChallengeProcedure,
			connect.WithSchema(slackMethods.ByName("Challenge")),
			connect.WithClientOptions(opts...),
		),
	}
}

// slackClient implements SlackClient.
type slackClient struct {
	challenge *connect.Client[v1.SlackChallengeRequest, v1.SlackChallengeResponse]
}

// Challenge calls service.v1.Slack.Challenge.
func (c *slackClient) Challenge(ctx context.Context, req *connect.Request[v1.SlackChallengeRequest]) (*connect.Response[v1.SlackChallengeResponse], error) {
	return c.challenge.CallUnary(ctx, req)
}

// SlackHandler is an implementation of the service.v1.Slack service.
type SlackHandler interface {
	Challenge(context.Context, *connect.Request[v1.SlackChallengeRequest]) (*connect.Response[v1.SlackChallengeResponse], error)
}

// NewSlackHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSlackHandler(svc SlackHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	slackMethods := v1.File_service_v1_slack_proto.Services().ByName("Slack").Methods()
	slackChallengeHandler := connect.NewUnaryHandler(
		SlackChallengeProcedure,
		svc.Challenge,
		connect.WithSchema(slackMethods.ByName("Challenge")),
		connect.WithHandlerOptions(opts...),
	)
	return "/service.v1.Slack/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SlackChallengeProcedure:
			slackChallengeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSlackHandler returns CodeUnimplemented from all methods.
type UnimplementedSlackHandler struct{}

func (UnimplementedSlackHandler) Challenge(context.Context, *connect.Request[v1.SlackChallengeRequest]) (*connect.Response[v1.SlackChallengeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("service.v1.Slack.Challenge is not implemented"))
}
